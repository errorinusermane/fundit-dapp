generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id // 지갑 주소 (0x...)
  email       String    @unique
  role        Role
  createdAt   DateTime  @default(now())
  lastLoginAt DateTime? @updatedAt

  proposals Proposal[]      @relation("UserProposals")
  bids      Bid[]           @relation("UserBids")
  contracts Contract[]      @relation("UserContracts")
  companyAs Contract[]      @relation("CompanyContracts")
  rewards   RewardHistory[] @relation("UserRewards")
}

enum Role {
  user
  company
}

enum ProposalStatus {
  ACTIVE
  CLOSED
  CANCELLED
}

model Proposal {
  id                    Int            @id @default(autoincrement())
  proposer              String
  title                 String
  description           String
  mandatoryRequirements String[]
  enrollmentConditions  String[]
  optionalFeatures      String[]
  desiredStartDate      DateTime
  minPremium            BigInt
  maxPremium            BigInt
  createdAt             DateTime       @default(now())
  status                ProposalStatus
  bidCount              Int            @default(0)

  user User  @relation("UserProposals", fields: [proposer], references: [id])
  bids Bid[]
}

enum BidStatus {
  ACTIVE
  SELECTED
  REJECTED
}

model Bid {
  id                         Int       @id @default(autoincrement())
  bidId                      Int       @unique // on-chain ID
  proposalId                 Int
  company                    String // wallet address
  companyName                String
  planTitle                  String
  planType                   String
  outpatientCoveragePerVisit Int
  inpatientCoverage          Int
  nonCoveredCoverage         Int
  monthlyPremium             Int
  contractPeriod             Int
  ageEligibility             Int
  occupationEligibility      String
  voteCount                  Int
  minVotes                   Int
  status                     BidStatus
  createdAt                  DateTime  @default(now())

  proposal Proposal @relation(fields: [proposalId], references: [id])
  user     User     @relation("UserBids", fields: [company], references: [id])

  @@index([proposalId])
  @@index([company])
  @@index([status])
  @@index([createdAt])
}

model Contract {
  id             Int            @id @default(autoincrement())
  contractId     Int            @unique
  proposalId     Int
  bidId          Int
  userAddress    String         @db.VarChar(42)
  companyAddress String         @db.VarChar(42)
  monthlyPremium BigInt
  contractPeriod Int
  startDate      DateTime
  autoPayment    Boolean        @default(false)
  status         ContractStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  user    User @relation("UserContracts", fields: [userAddress], references: [id])
  company User @relation("CompanyContracts", fields: [companyAddress], references: [id])

  @@index([userAddress])
  @@index([companyAddress])
  @@index([proposalId])
}

enum ContractStatus {
  ACTIVE
  TERMINATED
}

model RewardHistory {
  id        Int      @id @default(autoincrement())
  address   String
  amount    String
  txHash    String
  createdAt DateTime @default(now())

  user User @relation("UserRewards", fields: [address], references: [id])

  @@index([address])
}
