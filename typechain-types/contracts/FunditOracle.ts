/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FunditOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVerificationStatus"
      | "oracleAdmin"
      | "requestByContract"
      | "requestCount"
      | "requests"
      | "setOracleAdmin"
      | "submitVerificationRequest"
      | "verifyClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "VerificationRequested" | "VerificationResolved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getVerificationStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestByContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitVerificationRequest",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaim",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVerificationStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestByContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitVerificationRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaim",
    data: BytesLike
  ): Result;
}

export namespace VerificationRequestedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    contractId: BigNumberish,
    requester: AddressLike,
    evidenceHash: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    contractId: bigint,
    requester: string,
    evidenceHash: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    contractId: bigint;
    requester: string;
    evidenceHash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationResolvedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    status: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    requestId: bigint,
    status: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    requestId: bigint;
    status: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunditOracle extends BaseContract {
  connect(runner?: ContractRunner | null): FunditOracle;
  waitForDeployment(): Promise<this>;

  interface: FunditOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVerificationStatus: TypedContractMethod<
    [contractId: BigNumberish],
    [bigint],
    "view"
  >;

  oracleAdmin: TypedContractMethod<[], [string], "view">;

  requestByContract: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  requestCount: TypedContractMethod<[], [bigint], "view">;

  requests: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        contractId: bigint;
        requester: string;
        evidenceHash: string;
        status: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  setOracleAdmin: TypedContractMethod<
    [newAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  submitVerificationRequest: TypedContractMethod<
    [contractId: BigNumberish, evidenceHash: string],
    [void],
    "nonpayable"
  >;

  verifyClaim: TypedContractMethod<
    [requestId: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVerificationStatus"
  ): TypedContractMethod<[contractId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "oracleAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "requestByContract"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requests"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint] & {
        contractId: bigint;
        requester: string;
        evidenceHash: string;
        status: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setOracleAdmin"
  ): TypedContractMethod<[newAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitVerificationRequest"
  ): TypedContractMethod<
    [contractId: BigNumberish, evidenceHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyClaim"
  ): TypedContractMethod<
    [requestId: BigNumberish, approved: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "VerificationRequested"
  ): TypedContractEvent<
    VerificationRequestedEvent.InputTuple,
    VerificationRequestedEvent.OutputTuple,
    VerificationRequestedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationResolved"
  ): TypedContractEvent<
    VerificationResolvedEvent.InputTuple,
    VerificationResolvedEvent.OutputTuple,
    VerificationResolvedEvent.OutputObject
  >;

  filters: {
    "VerificationRequested(uint256,uint256,address,string,uint256)": TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;
    VerificationRequested: TypedContractEvent<
      VerificationRequestedEvent.InputTuple,
      VerificationRequestedEvent.OutputTuple,
      VerificationRequestedEvent.OutputObject
    >;

    "VerificationResolved(uint256,uint8,uint256)": TypedContractEvent<
      VerificationResolvedEvent.InputTuple,
      VerificationResolvedEvent.OutputTuple,
      VerificationResolvedEvent.OutputObject
    >;
    VerificationResolved: TypedContractEvent<
      VerificationResolvedEvent.InputTuple,
      VerificationResolvedEvent.OutputTuple,
      VerificationResolvedEvent.OutputObject
    >;
  };
}
