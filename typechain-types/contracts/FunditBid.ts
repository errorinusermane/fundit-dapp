/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FunditBid {
  export type BidStruct = {
    id: BigNumberish;
    proposalId: BigNumberish;
    bidder: AddressLike;
    coverageOffer: BigNumberish;
    premiumOffer: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BidStructOutput = [
    id: bigint,
    proposalId: bigint,
    bidder: string,
    coverageOffer: bigint,
    premiumOffer: bigint,
    timestamp: bigint
  ] & {
    id: bigint;
    proposalId: bigint;
    bidder: string;
    coverageOffer: bigint;
    premiumOffer: bigint;
    timestamp: bigint;
  };
}

export interface FunditBidInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bidCount"
      | "bids"
      | "bidsByProposal"
      | "getBid"
      | "getBidsByProposal"
      | "submitBid"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BidSubmitted"): EventFragment;

  encodeFunctionData(functionFragment: "bidCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "bidsByProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidsByProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBid",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bidCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidsByProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidsByProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitBid", data: BytesLike): Result;
}

export namespace BidSubmittedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposalId: BigNumberish,
    bidder: AddressLike,
    coverageOffer: BigNumberish,
    premiumOffer: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    proposalId: bigint,
    bidder: string,
    coverageOffer: bigint,
    premiumOffer: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: bigint;
    proposalId: bigint;
    bidder: string;
    coverageOffer: bigint;
    premiumOffer: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunditBid extends BaseContract {
  connect(runner?: ContractRunner | null): FunditBid;
  waitForDeployment(): Promise<this>;

  interface: FunditBidInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bidCount: TypedContractMethod<[], [bigint], "view">;

  bids: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        proposalId: bigint;
        bidder: string;
        coverageOffer: bigint;
        premiumOffer: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  bidsByProposal: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getBid: TypedContractMethod<
    [bidId: BigNumberish],
    [FunditBid.BidStructOutput],
    "view"
  >;

  getBidsByProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [FunditBid.BidStructOutput[]],
    "view"
  >;

  submitBid: TypedContractMethod<
    [
      proposalId: BigNumberish,
      coverageOffer: BigNumberish,
      premiumOffer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bidCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string, bigint, bigint, bigint] & {
        id: bigint;
        proposalId: bigint;
        bidder: string;
        coverageOffer: bigint;
        premiumOffer: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "bidsByProposal"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBid"
  ): TypedContractMethod<
    [bidId: BigNumberish],
    [FunditBid.BidStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBidsByProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [FunditBid.BidStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitBid"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      coverageOffer: BigNumberish,
      premiumOffer: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BidSubmitted"
  ): TypedContractEvent<
    BidSubmittedEvent.InputTuple,
    BidSubmittedEvent.OutputTuple,
    BidSubmittedEvent.OutputObject
  >;

  filters: {
    "BidSubmitted(uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;
    BidSubmitted: TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;
  };
}
