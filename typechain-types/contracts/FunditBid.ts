/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FunditBid {
  export type BidStruct = {
    company: AddressLike;
    proposalId: BigNumberish;
    companyName: string;
    planTitle: string;
    planType: string;
    outpatientCoveragePerVisit: BigNumberish;
    inpatientCoverage: BigNumberish;
    nonCoveredCoverage: BigNumberish;
    monthlyPremium: BigNumberish;
    contractPeriod: BigNumberish;
    ageEligibility: BigNumberish;
    occupationEligibility: string;
    voteCount: BigNumberish;
    minVotes: BigNumberish;
    status: BigNumberish;
    createdAt: BigNumberish;
  };

  export type BidStructOutput = [
    company: string,
    proposalId: bigint,
    companyName: string,
    planTitle: string,
    planType: string,
    outpatientCoveragePerVisit: bigint,
    inpatientCoverage: bigint,
    nonCoveredCoverage: bigint,
    monthlyPremium: bigint,
    contractPeriod: bigint,
    ageEligibility: bigint,
    occupationEligibility: string,
    voteCount: bigint,
    minVotes: bigint,
    status: bigint,
    createdAt: bigint
  ] & {
    company: string;
    proposalId: bigint;
    companyName: string;
    planTitle: string;
    planType: string;
    outpatientCoveragePerVisit: bigint;
    inpatientCoverage: bigint;
    nonCoveredCoverage: bigint;
    monthlyPremium: bigint;
    contractPeriod: bigint;
    ageEligibility: bigint;
    occupationEligibility: string;
    voteCount: bigint;
    minVotes: bigint;
    status: bigint;
    createdAt: bigint;
  };
}

export interface FunditBidInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bids"
      | "getBid"
      | "getBidsByProposal"
      | "getMyBids"
      | "getVotes"
      | "hasVoted"
      | "proposalToBids"
      | "submitBid"
      | "updateBidStatus"
      | "voteBid"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BidStatusUpdated" | "BidSubmitted" | "BidVoted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getBid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBidsByProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyBids",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalToBids",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBid",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBidStatus",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voteBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBidsByProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyBids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalToBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBidStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteBid", data: BytesLike): Result;
}

export namespace BidStatusUpdatedEvent {
  export type InputTuple = [bidId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [bidId: bigint, status: bigint];
  export interface OutputObject {
    bidId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidSubmittedEvent {
  export type InputTuple = [
    bidId: BigNumberish,
    proposalId: BigNumberish,
    company: AddressLike
  ];
  export type OutputTuple = [
    bidId: bigint,
    proposalId: bigint,
    company: string
  ];
  export interface OutputObject {
    bidId: bigint;
    proposalId: bigint;
    company: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidVotedEvent {
  export type InputTuple = [bidId: BigNumberish, user: AddressLike];
  export type OutputTuple = [bidId: bigint, user: string];
  export interface OutputObject {
    bidId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunditBid extends BaseContract {
  connect(runner?: ContractRunner | null): FunditBid;
  waitForDeployment(): Promise<this>;

  interface: FunditBidInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bids: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        company: string;
        proposalId: bigint;
        companyName: string;
        planTitle: string;
        planType: string;
        outpatientCoveragePerVisit: bigint;
        inpatientCoverage: bigint;
        nonCoveredCoverage: bigint;
        monthlyPremium: bigint;
        contractPeriod: bigint;
        ageEligibility: bigint;
        occupationEligibility: string;
        voteCount: bigint;
        minVotes: bigint;
        status: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getBid: TypedContractMethod<
    [bidId: BigNumberish],
    [FunditBid.BidStructOutput],
    "view"
  >;

  getBidsByProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getMyBids: TypedContractMethod<[company: AddressLike], [bigint[]], "view">;

  getVotes: TypedContractMethod<[bidId: BigNumberish], [bigint], "view">;

  hasVoted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  proposalToBids: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  submitBid: TypedContractMethod<
    [
      proposalId: BigNumberish,
      companyName: string,
      planTitle: string,
      planType: string,
      outpatientCoveragePerVisit: BigNumberish,
      inpatientCoverage: BigNumberish,
      nonCoveredCoverage: BigNumberish,
      monthlyPremium: BigNumberish,
      contractPeriod: BigNumberish,
      ageEligibility: BigNumberish,
      occupationEligibility: string,
      minVotes: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  updateBidStatus: TypedContractMethod<
    [bidId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;

  voteBid: TypedContractMethod<[bidId: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bids"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        company: string;
        proposalId: bigint;
        companyName: string;
        planTitle: string;
        planType: string;
        outpatientCoveragePerVisit: bigint;
        inpatientCoverage: bigint;
        nonCoveredCoverage: bigint;
        monthlyPremium: bigint;
        contractPeriod: bigint;
        ageEligibility: bigint;
        occupationEligibility: string;
        voteCount: bigint;
        minVotes: bigint;
        status: bigint;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBid"
  ): TypedContractMethod<
    [bidId: BigNumberish],
    [FunditBid.BidStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBidsByProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMyBids"
  ): TypedContractMethod<[company: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVotes"
  ): TypedContractMethod<[bidId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalToBids"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitBid"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      companyName: string,
      planTitle: string,
      planType: string,
      outpatientCoveragePerVisit: BigNumberish,
      inpatientCoverage: BigNumberish,
      nonCoveredCoverage: BigNumberish,
      monthlyPremium: BigNumberish,
      contractPeriod: BigNumberish,
      ageEligibility: BigNumberish,
      occupationEligibility: string,
      minVotes: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateBidStatus"
  ): TypedContractMethod<
    [bidId: BigNumberish, status: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voteBid"
  ): TypedContractMethod<[bidId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BidStatusUpdated"
  ): TypedContractEvent<
    BidStatusUpdatedEvent.InputTuple,
    BidStatusUpdatedEvent.OutputTuple,
    BidStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BidSubmitted"
  ): TypedContractEvent<
    BidSubmittedEvent.InputTuple,
    BidSubmittedEvent.OutputTuple,
    BidSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "BidVoted"
  ): TypedContractEvent<
    BidVotedEvent.InputTuple,
    BidVotedEvent.OutputTuple,
    BidVotedEvent.OutputObject
  >;

  filters: {
    "BidStatusUpdated(uint256,uint8)": TypedContractEvent<
      BidStatusUpdatedEvent.InputTuple,
      BidStatusUpdatedEvent.OutputTuple,
      BidStatusUpdatedEvent.OutputObject
    >;
    BidStatusUpdated: TypedContractEvent<
      BidStatusUpdatedEvent.InputTuple,
      BidStatusUpdatedEvent.OutputTuple,
      BidStatusUpdatedEvent.OutputObject
    >;

    "BidSubmitted(uint256,uint256,address)": TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;
    BidSubmitted: TypedContractEvent<
      BidSubmittedEvent.InputTuple,
      BidSubmittedEvent.OutputTuple,
      BidSubmittedEvent.OutputObject
    >;

    "BidVoted(uint256,address)": TypedContractEvent<
      BidVotedEvent.InputTuple,
      BidVotedEvent.OutputTuple,
      BidVotedEvent.OutputObject
    >;
    BidVoted: TypedContractEvent<
      BidVotedEvent.InputTuple,
      BidVotedEvent.OutputTuple,
      BidVotedEvent.OutputObject
    >;
  };
}
