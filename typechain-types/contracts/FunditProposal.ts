/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FunditProposal {
  export type ProposalStruct = {
    id: BigNumberish;
    proposer: AddressLike;
    title: string;
    description: string;
    coverageAmount: BigNumberish;
    premium: BigNumberish;
    deadline: BigNumberish;
  };

  export type ProposalStructOutput = [
    id: bigint,
    proposer: string,
    title: string,
    description: string,
    coverageAmount: bigint,
    premium: bigint,
    deadline: bigint
  ] & {
    id: bigint;
    proposer: string;
    title: string;
    description: string;
    coverageAmount: bigint;
    premium: bigint;
    deadline: bigint;
  };
}

export interface FunditProposalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "closeProposal"
      | "createProposal"
      | "getAllProposals"
      | "getProposal"
      | "proposalCount"
      | "proposals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalClosed" | "ProposalCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "closeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "closeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
}

export namespace ProposalClosedEvent {
  export type InputTuple = [id: BigNumberish, closedAt: BigNumberish];
  export type OutputTuple = [id: bigint, closedAt: bigint];
  export interface OutputObject {
    id: bigint;
    closedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    proposer: AddressLike,
    title: string,
    coverageAmount: BigNumberish,
    premium: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    proposer: string,
    title: string,
    coverageAmount: bigint,
    premium: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    id: bigint;
    proposer: string;
    title: string;
    coverageAmount: bigint;
    premium: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunditProposal extends BaseContract {
  connect(runner?: ContractRunner | null): FunditProposal;
  waitForDeployment(): Promise<this>;

  interface: FunditProposalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  closeProposal: TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  createProposal: TypedContractMethod<
    [
      _title: string,
      _description: string,
      _coverageAmount: BigNumberish,
      _premium: BigNumberish,
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAllProposals: TypedContractMethod<
    [],
    [FunditProposal.ProposalStructOutput[]],
    "view"
  >;

  getProposal: TypedContractMethod<
    [_id: BigNumberish],
    [FunditProposal.ProposalStructOutput],
    "view"
  >;

  proposalCount: TypedContractMethod<[], [bigint], "view">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        coverageAmount: bigint;
        premium: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "closeProposal"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      _title: string,
      _description: string,
      _coverageAmount: BigNumberish,
      _premium: BigNumberish,
      _deadline: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllProposals"
  ): TypedContractMethod<[], [FunditProposal.ProposalStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [FunditProposal.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint, bigint, bigint] & {
        id: bigint;
        proposer: string;
        title: string;
        description: string;
        coverageAmount: bigint;
        premium: bigint;
        deadline: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ProposalClosed"
  ): TypedContractEvent<
    ProposalClosedEvent.InputTuple,
    ProposalClosedEvent.OutputTuple,
    ProposalClosedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;

  filters: {
    "ProposalClosed(uint256,uint256)": TypedContractEvent<
      ProposalClosedEvent.InputTuple,
      ProposalClosedEvent.OutputTuple,
      ProposalClosedEvent.OutputObject
    >;
    ProposalClosed: TypedContractEvent<
      ProposalClosedEvent.InputTuple,
      ProposalClosedEvent.OutputTuple,
      ProposalClosedEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,uint256,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
  };
}
