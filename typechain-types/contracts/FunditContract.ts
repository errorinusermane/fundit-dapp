/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace FunditContract {
  export type InsuranceContractStruct = {
    id: BigNumberish;
    proposalId: BigNumberish;
    bidId: BigNumberish;
    user: AddressLike;
    company: AddressLike;
    coverageAmount: BigNumberish;
    premiumAmount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    status: BigNumberish;
  };

  export type InsuranceContractStructOutput = [
    id: bigint,
    proposalId: bigint,
    bidId: bigint,
    user: string,
    company: string,
    coverageAmount: bigint,
    premiumAmount: bigint,
    startTime: bigint,
    endTime: bigint,
    status: bigint
  ] & {
    id: bigint;
    proposalId: bigint;
    bidId: bigint;
    user: string;
    company: string;
    coverageAmount: bigint;
    premiumAmount: bigint;
    startTime: bigint;
    endTime: bigint;
    status: bigint;
  };
}

export interface FunditContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelContract"
      | "completeContract"
      | "confirmContract"
      | "contractCount"
      | "contracts"
      | "contractsByCompany"
      | "contractsByUser"
      | "getContract"
      | "getContractsByCompany"
      | "getContractsByUser"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ContractConfirmed"): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmContract",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contractCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsByCompany",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsByUser",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByCompany",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractsByUser",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractsByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractsByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractsByUser",
    data: BytesLike
  ): Result;
}

export namespace ContractConfirmedEvent {
  export type InputTuple = [
    contractId: BigNumberish,
    proposalId: BigNumberish,
    bidId: BigNumberish,
    user: AddressLike,
    company: AddressLike,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    contractId: bigint,
    proposalId: bigint,
    bidId: bigint,
    user: string,
    company: string,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    contractId: bigint;
    proposalId: bigint;
    bidId: bigint;
    user: string;
    company: string;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FunditContract extends BaseContract {
  connect(runner?: ContractRunner | null): FunditContract;
  waitForDeployment(): Promise<this>;

  interface: FunditContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelContract: TypedContractMethod<
    [contractId: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeContract: TypedContractMethod<
    [contractId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmContract: TypedContractMethod<
    [
      proposalId: BigNumberish,
      bidId: BigNumberish,
      user: AddressLike,
      company: AddressLike,
      coverageAmount: BigNumberish,
      premiumAmount: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  contractCount: TypedContractMethod<[], [bigint], "view">;

  contracts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        proposalId: bigint;
        bidId: bigint;
        user: string;
        company: string;
        coverageAmount: bigint;
        premiumAmount: bigint;
        startTime: bigint;
        endTime: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  contractsByCompany: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  contractsByUser: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getContract: TypedContractMethod<
    [contractId: BigNumberish],
    [FunditContract.InsuranceContractStructOutput],
    "view"
  >;

  getContractsByCompany: TypedContractMethod<
    [company: AddressLike],
    [FunditContract.InsuranceContractStructOutput[]],
    "view"
  >;

  getContractsByUser: TypedContractMethod<
    [user: AddressLike],
    [FunditContract.InsuranceContractStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelContract"
  ): TypedContractMethod<[contractId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeContract"
  ): TypedContractMethod<[contractId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmContract"
  ): TypedContractMethod<
    [
      proposalId: BigNumberish,
      bidId: BigNumberish,
      user: AddressLike,
      company: AddressLike,
      coverageAmount: BigNumberish,
      premiumAmount: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contractCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        proposalId: bigint;
        bidId: bigint;
        user: string;
        company: string;
        coverageAmount: bigint;
        premiumAmount: bigint;
        startTime: bigint;
        endTime: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractsByCompany"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractsByUser"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContract"
  ): TypedContractMethod<
    [contractId: BigNumberish],
    [FunditContract.InsuranceContractStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractsByCompany"
  ): TypedContractMethod<
    [company: AddressLike],
    [FunditContract.InsuranceContractStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractsByUser"
  ): TypedContractMethod<
    [user: AddressLike],
    [FunditContract.InsuranceContractStructOutput[]],
    "view"
  >;

  getEvent(
    key: "ContractConfirmed"
  ): TypedContractEvent<
    ContractConfirmedEvent.InputTuple,
    ContractConfirmedEvent.OutputTuple,
    ContractConfirmedEvent.OutputObject
  >;

  filters: {
    "ContractConfirmed(uint256,uint256,uint256,address,address,uint256,uint256)": TypedContractEvent<
      ContractConfirmedEvent.InputTuple,
      ContractConfirmedEvent.OutputTuple,
      ContractConfirmedEvent.OutputObject
    >;
    ContractConfirmed: TypedContractEvent<
      ContractConfirmedEvent.InputTuple,
      ContractConfirmedEvent.OutputTuple,
      ContractConfirmedEvent.OutputObject
    >;
  };
}
